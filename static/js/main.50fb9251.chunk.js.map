{"version":3,"sources":["components/navbar/wide.navbar.component.js","components/navbar/mobile.navbar.component.js","backend/game/data/users.js","backend/game/data/questions.js","backend/game/game.backend.js","services/game/game.service.js","actions/users.actions.js","actions/questions.actions.js","actions/authenticatedUser.action.js","actions/shared.actions.js","components/navbar/navbar.component.js","components/footer/footer.component.js","views/dashboard/compose/compose.component.js","components/user/scoreboard/user.scoreboard.component.js","views/dashboard/leaderboard/leaderboard.component.js","views/dashboard/login/login.component.js","components/question/info/question.info.component.js","components/question/list/question.list.component.js","views/dashboard/home/home.component.js","components/question/answer/question.answer.component.js","components/user/vote/user.vote.component.js","components/question/result/question.result.component.js","views/dashboard/detail/detail.component.js","components/error/error.component.js","views/dashboard/notfound/notfound.component.js","views/dashboard/dashboard.component.js","App.js","serviceWorker.js","reducers/index.js","reducers/users.reducer.js","reducers/questions.reducer.js","reducers/authenticatedUser.reducer.js","middlewares/logger.middleware.js","middlewares/index.js","index.js","assets/logo.svg"],"names":["WideNavbarComponent","props","isLoading","authenticatedUser","signOut","Menu","size","secondary","className","Item","Image","src","logo","alt","header","Fragment","avatarURL","spaced","avatar","name","as","NavLink","to","exact","activeClassName","position","onClick","Icon","icon","text","MobileNavbarComponent","Dropdown","Button","Divider","users","molly","id","answers","questions","matthew","elyse","author","timestamp","optionOne","votes","optionTwo","GameBackend","Math","random","toString","substring","Promise","res","rej","setTimeout","userId","resolve","reject","userKey","optionOneText","optionTwoText","generateUID","Date","now","question","formattedQuestion","formatQuestion","concat","e","qid","answer","medalColors","GameService","all","getUsers","getQuestions","then","signIn","saveQuestion","questionAnswer","saveQuestionAnswer","Object","keys","map","user","answered","length","asked","score","medalColor","sort","a","b","slice","userScoreCard","index","questionId","authenticatedUserAnswer","optionOneVotes","optionTwoVotes","authorId","authorName","authorAvatar","USERS_ACTION_TYPES","handleReceiveUsers","dispatch","showLoading","type","receiveUsers","hideLoading","QUESTIONS_ACTION_TYPES","AUTHENTICATED_USER_ACTION_TYPES","setAuthenticatedUser","handleAddNewQuestion","addQuestion","action","authenticatedUserId","handleSaveQuestionAnswer","updateVotes","updateAnswers","handleSignIn","receiveQuestions","catch","error","handleSignOut","NavbarComponent","this","style","backgroundColor","Responsive","minWidth","bind","maxWidth","Component","connect","loadingBar","default","FooterComponent","href","rel","target","ComposeComponent","state","handleChange","handleSubmit","event","value","setState","preventDefault","toHome","history","push","Card","fluid","Content","textAlign","CardContent","Form","onSubmit","autoComplete","Header","Input","placeholder","onChange","horizontal","color","content","withRouter","UserScoreboardComponent","scoreBoardCard","Segment","raised","Label","ribbon","Grid","columns","verticalAlign","Row","Column","circular","width","key","LeaderboardComponent","userScoreBoards","generateScoreBoardCards","Message","negative","LoginComponent","userOptions","initializeUserOptions","CardHeader","padding","floating","labeled","button","option","image","QuestionInfoComponent","questionCard","celled","attached","Link","QuestionListComponent","questionCards","HomeComponent","loading","generateQuestionBasicCardInfo","answeredList","filter","unAnsweredList","panes","menuItem","render","Tab","Pane","QuestionAnswerComponent","divided","Field","Radio","label","checked","UserVoteComponent","userVoteCard","isUserVote","total","percentage","toFixed","tertiary","Progress","percent","progress","QuestionResultComponent","optionOneUserVoteCard","optionTwoUserVoteCard","DetailComponent","activeUser","isAnswered","includes","match","params","ErrorComponent","message","inverted","NotfoundComponent","DashboardComponent","path","component","App","basename","basic","Boolean","window","location","hostname","combineReducers","loadingBarReducer","logger","store","next","console","group","log","result","getState","groupEnd","applyMiddleware","thunk","createStore","reducer","middleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.50fb9251.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Icon, Image, Menu} from \"semantic-ui-react\";\r\nimport logo from \"../../assets/logo.svg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction WideNavbarComponent(props) {\r\n\r\n    const {isLoading, authenticatedUser, signOut} = props;\r\n\r\n    return (\r\n        <Menu size='large' secondary className=\"application-navbar\">\r\n            <Menu.Item>\r\n                <Image src={logo}\r\n                       size='mini'\r\n                       alt=\"would you rather application logo\"\r\n                       className={isLoading ? \"spin\" : \"\"}\r\n                />\r\n            </Menu.Item>\r\n            {!authenticatedUser && (<Menu.Item header>Would you rather...</Menu.Item>)}\r\n            {authenticatedUser && (\r\n                <React.Fragment>\r\n                    <Menu.Item header>\r\n                        <Image src={authenticatedUser.avatarURL}\r\n                               size='mini'\r\n                               spaced={\"right\"}\r\n                               avatar\r\n                               alt={`avatar of ${authenticatedUser.name}`}\r\n                        />\r\n                        {`Hello, ${authenticatedUser.name}`}\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='home'\r\n                    />\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/add\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='New Question'\r\n                    />\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/leaderboard\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='Leader Board'\r\n                    />\r\n                </React.Fragment>\r\n            )}\r\n            <Menu.Menu position='right'>\r\n                {authenticatedUser && (\r\n                    <Menu.Item\r\n                        onClick={() => {\r\n                            signOut()\r\n                        }}\r\n                        name='sign-out'>\r\n                        <Icon name='sign-out'/>\r\n                        Sign out\r\n                    </Menu.Item>\r\n                )}\r\n                {!authenticatedUser && (\r\n                    <Menu.Item as={NavLink}\r\n                               to=\"/login\"\r\n                               exact\r\n                               activeClassName='active'\r\n                               name=\"sign-in\"\r\n                               icon='sign-in'\r\n                               text='Sign In'/>\r\n                )}\r\n            </Menu.Menu>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default WideNavbarComponent;\r\n\r\nWideNavbarComponent.propTypes = {\r\n    isLoading: PropTypes.number,\r\n    authenticatedUser: PropTypes.object,\r\n    signOut: PropTypes.func.isRequired\r\n};\r\n","import React from 'react';\r\nimport {Button, Dropdown, Image, Menu} from \"semantic-ui-react\";\r\nimport logo from \"../../assets/logo.svg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MobileNavbarComponent(props) {\r\n\r\n    const {isLoading, authenticatedUser, signOut} = props;\r\n\r\n    return (\r\n        <Menu size='large' secondary className=\"application-navbar\">\r\n            <Menu.Item>\r\n                <Image src={logo}\r\n                       size='mini'\r\n                       alt=\"would you rather application logo\"\r\n                       className={isLoading ? \"spin\" : \"\"}\r\n                />\r\n            </Menu.Item>\r\n            {!authenticatedUser && (<Menu.Item header>Would you rather...</Menu.Item>)}\r\n            {authenticatedUser && (<Menu.Item header>\r\n                <Image src={authenticatedUser.avatarURL}\r\n                       size='mini'\r\n                       spaced={\"right\"}\r\n                       avatar\r\n                       alt={`avatar of ${authenticatedUser.name}`}\r\n                />\r\n                {`Hello, ${authenticatedUser.name}`}\r\n            </Menu.Item>)}\r\n            <Menu.Menu position='right'>\r\n                <Dropdown\r\n                    icon='bars'\r\n                    as={Button}\r\n                    secondary\r\n                    size=\"large\"\r\n                    className='icon'\r\n                >\r\n                    <Dropdown.Menu>\r\n                        {authenticatedUser && (\r\n                            <React.Fragment>\r\n                                <Dropdown.Item as={NavLink}\r\n                                               to=\"/\"\r\n                                               exact\r\n                                               activeClassName='active'\r\n                                               name='home'>\r\n                                    Home</Dropdown.Item>\r\n                                <Dropdown.Item as={NavLink}\r\n                                               to=\"/add\"\r\n                                               exact\r\n                                               activeClassName='active'\r\n                                               name='New Question'>\r\n                                    New Question</Dropdown.Item>\r\n                                <Dropdown.Item as={NavLink}\r\n                                               to=\"/leaderboard\"\r\n                                               exact\r\n                                               activeClassName='active'\r\n                                               name='Leader Board'>\r\n                                    Leader Board</Dropdown.Item>\r\n                                <Dropdown.Divider/>\r\n                                <Dropdown.Item onClick={() => {\r\n                                                   signOut()\r\n                                               }}\r\n                                               icon='sign-out'\r\n                                               text='Sign Out'/>\r\n                            </React.Fragment>\r\n                        )}\r\n                        {!authenticatedUser && (\r\n                            <Dropdown.Item as={NavLink}\r\n                                           to=\"/login\"\r\n                                           exact\r\n                                           activeClassName='active'\r\n                                           name=\"sign-in\"\r\n                                           icon='sign-in'\r\n                                           text='Sign In'/>\r\n                        )}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </Menu.Menu>\r\n        </Menu>\r\n    );\r\n}\r\n\r\nexport default MobileNavbarComponent;\r\n\r\nMobileNavbarComponent.propTypes = {\r\n    isLoading: PropTypes.number,\r\n    authenticatedUser: PropTypes.object,\r\n    signOut: PropTypes.func.isRequired\r\n};\r\n","export let users = {\r\n    molly: {\r\n        id: 'molly',\r\n        name: 'Molly',\r\n        avatarURL: 'https://semantic-ui.com/images/avatar2/large/molly.png',\r\n        answers: {\r\n            \"8xf0y6ziyjabvozdd253nd\": 'optionOne',\r\n            \"6ni6ok3ym7mf1p33lnez\": 'optionTwo',\r\n            \"am8ehyc8byjqgar0jgpub9\": 'optionTwo',\r\n            \"loxhs1bqm25b708cmbf3g\": 'optionTwo'\r\n        },\r\n        questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']\r\n    },\r\n    matthew: {\r\n        id: 'matthew',\r\n        name: 'Matthew',\r\n        avatarURL: 'https://semantic-ui.com/images/avatar2/large/matthew.png',\r\n        answers: {\r\n            \"vthrdm985a262al8qx3do\": 'optionOne',\r\n            \"xj352vofupe1dqz9emx13r\": 'optionTwo',\r\n        },\r\n        questions: ['loxhs1bqm25b708cmbf3g', 'vthrdm985a262al8qx3do'],\r\n    },\r\n    elyse: {\r\n        id: 'elyse',\r\n        name: 'Elyse',\r\n        avatarURL: 'https://semantic-ui.com/images/avatar2/large/elyse.png',\r\n        answers: {\r\n            \"xj352vofupe1dqz9emx13r\": 'optionOne',\r\n            \"vthrdm985a262al8qx3do\": 'optionTwo',\r\n            \"6ni6ok3ym7mf1p33lnez\": 'optionTwo'\r\n        },\r\n        questions: ['6ni6ok3ym7mf1p33lnez', 'xj352vofupe1dqz9emx13r'],\r\n    }\r\n};\r\n","export let questions = {\r\n    \"8xf0y6ziyjabvozdd253nd\": {\r\n        id: '8xf0y6ziyjabvozdd253nd',\r\n        author: 'molly',\r\n        timestamp: 1467166872634,\r\n        optionOne: {\r\n            votes: ['molly'],\r\n            text: 'have horrible short term memory',\r\n        },\r\n        optionTwo: {\r\n            votes: [],\r\n            text: 'have horrible long term memory'\r\n        }\r\n    },\r\n    \"6ni6ok3ym7mf1p33lnez\": {\r\n        id: '6ni6ok3ym7mf1p33lnez',\r\n        author: 'matthew',\r\n        timestamp: 1468479767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'become a superhero',\r\n        },\r\n        optionTwo: {\r\n            votes: ['matthew', 'molly'],\r\n            text: 'become a supervillain'\r\n        }\r\n    },\r\n    \"am8ehyc8byjqgar0jgpub9\": {\r\n        id: 'am8ehyc8byjqgar0jgpub9',\r\n        author: 'molly',\r\n        timestamp: 1488579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be telekinetic',\r\n        },\r\n        optionTwo: {\r\n            votes: ['molly'],\r\n            text: 'be telepathic'\r\n        }\r\n    },\r\n    \"loxhs1bqm25b708cmbf3g\": {\r\n        id: 'loxhs1bqm25b708cmbf3g',\r\n        author: 'elyse',\r\n        timestamp: 1482579767190,\r\n        optionOne: {\r\n            votes: [],\r\n            text: 'be a front-end developer',\r\n        },\r\n        optionTwo: {\r\n            votes: ['molly'],\r\n            text: 'be a back-end developer'\r\n        }\r\n    },\r\n    \"vthrdm985a262al8qx3do\": {\r\n        id: 'vthrdm985a262al8qx3do',\r\n        author: 'elyse',\r\n        timestamp: 1489579767190,\r\n        optionOne: {\r\n            votes: ['elyse'],\r\n            text: 'find $50 yourself',\r\n        },\r\n        optionTwo: {\r\n            votes: ['matthew'],\r\n            text: 'have your best friend find $500'\r\n        }\r\n    },\r\n    \"xj352vofupe1dqz9emx13r\": {\r\n        id: 'xj352vofupe1dqz9emx13r',\r\n        author: 'matthew',\r\n        timestamp: 1493579767190,\r\n        optionOne: {\r\n            votes: ['matthew'],\r\n            text: 'write JavaScript',\r\n        },\r\n        optionTwo: {\r\n            votes: ['elyse'],\r\n            text: 'write Swift'\r\n        }\r\n    },\r\n};\r\n","import {questions, users} from \"./data\";\r\n\r\nexport class GameBackend {\r\n\r\n    static generateUID() {\r\n        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\r\n    }\r\n\r\n    static getUsers() {\r\n        return new Promise((res, rej) => {\r\n            setTimeout(() => res({...users}), 1000)\r\n        })\r\n    }\r\n\r\n    static getQuestions() {\r\n        return new Promise((res, rej) => {\r\n            setTimeout(() => res({...questions}), 1000)\r\n        })\r\n    }\r\n\r\n    static signIn(userId) {\r\n        return new Promise(((resolve, reject) => {\r\n            for (let userKey in users) {\r\n                if (userKey === userId) {\r\n                    setTimeout(() => resolve(userId), 1000);\r\n                    return;\r\n                }\r\n            }\r\n            reject(\"Invalid user!\");\r\n        }));\r\n    }\r\n\r\n    static formatQuestion({optionOneText, optionTwoText, author}) {\r\n        return {\r\n            id: GameBackend.generateUID(),\r\n            timestamp: Date.now(),\r\n            author,\r\n            optionOne: {\r\n                votes: [],\r\n                text: optionOneText,\r\n            },\r\n            optionTwo: {\r\n                votes: [],\r\n                text: optionTwoText,\r\n            }\r\n        }\r\n    }\r\n\r\n    static saveQuestion(question) {\r\n        return new Promise((res, rej) => {\r\n            try {\r\n                const authenticatedUser = question.author;\r\n                const formattedQuestion = GameBackend.formatQuestion(question);\r\n                setTimeout(() => {\r\n                    questions[formattedQuestion.id] = formattedQuestion;\r\n                    users[authenticatedUser].questions.concat([formattedQuestion.id]);\r\n                    res(formattedQuestion)\r\n                }, 1000)\r\n            } catch (e) {\r\n                rej(e);\r\n            }\r\n        })\r\n    }\r\n\r\n    static saveQuestionAnswer({authenticatedUser, qid, answer}) {\r\n        return new Promise((res, rej) => {\r\n            try {\r\n                setTimeout(() => {\r\n                    users[authenticatedUser].answers[qid] = answer;\r\n                    questions[qid][answer].votes.concat([authenticatedUser]);\r\n                    res()\r\n                }, 500)\r\n            } catch (e) {\r\n                rej(e);\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n","import {GameBackend} from \"../../backend/game/game.backend\";\r\n\r\nconst medalColors = [\"yellow\", \"teal\", \"grey\"];\r\n\r\nexport class GameService {\r\n\r\n    static getInitialData() {\r\n        return Promise.all([\r\n            GameBackend.getUsers(),\r\n            GameBackend.getQuestions()\r\n        ]).then(([users, questions]) => ({\r\n            users,\r\n            questions\r\n        }));\r\n    }\r\n\r\n    static getUsers() {\r\n        return GameBackend.getUsers();\r\n    }\r\n\r\n    static signIn(userId) {\r\n        return GameBackend.signIn(userId);\r\n    }\r\n\r\n    static getQuestions() {\r\n        return GameBackend.getQuestions();\r\n    }\r\n\r\n    static saveQuestion(question) {\r\n        return GameBackend.saveQuestion(question);\r\n    }\r\n\r\n    static saveQuestionAnswer(questionAnswer){\r\n        return GameBackend.saveQuestionAnswer(questionAnswer);\r\n    }\r\n\r\n    static generateScoreBoardCards(users) {\r\n        if (!users) return [];\r\n        return Object.keys(users)\r\n            .map((userId) => {\r\n                const user = users[userId];\r\n                const answered = Object.keys(user.answers).length;\r\n                const asked = Object.keys(user.questions).length;\r\n                return {\r\n                    id: userId,\r\n                    name: user.name,\r\n                    avatar: user.avatarURL,\r\n                    answered,\r\n                    asked,\r\n                    score: answered + asked,\r\n                    medalColor: \"\"\r\n                }\r\n            })\r\n            .sort((a, b) => b.score - a.score)\r\n            .slice(0, 3)\r\n            .map((userScoreCard, index) => ({\r\n                ...userScoreCard,\r\n                medalColor: medalColors[index]\r\n            }));\r\n    }\r\n\r\n\r\n    static generateQuestionBasicCardInfo(authenticatedUser, questionId, users, questions) {\r\n\r\n        if (!(users\r\n            && questions\r\n            && questionId\r\n            && questions[questionId]\r\n            && questions[questionId][\"optionOne\"]\r\n            && questions[questionId][\"optionTwo\"]\r\n            && questions[questionId][\"author\"])) {\r\n            return {}\r\n        }\r\n\r\n        const question = questions[questionId];\r\n        const user = users[question.author];\r\n        const authenticatedUserAnswer = questions[questionId][users[authenticatedUser][\"answers\"][questionId]];\r\n\r\n        return {\r\n            questionId,\r\n            optionOne: question.optionOne.text,\r\n            optionTwo: question.optionTwo.text,\r\n            optionOneVotes: question.optionOne.votes ? question.optionOne.votes.length : 0,\r\n            optionTwoVotes: question.optionTwo.votes ? question.optionTwo.votes.length : 0,\r\n            authenticatedUserAnswer: authenticatedUserAnswer ? authenticatedUserAnswer.text : \"\",\r\n            authorId: question.author,\r\n            authorName: user.name,\r\n            authorAvatar: user.avatarURL\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import {hideLoading, showLoading} from \"react-redux-loading-bar\";\r\nimport {GameService} from \"../services\";\r\n\r\nexport const USERS_ACTION_TYPES = {\r\n    RECEIVE_USERS: \"RECEIVE_USERS\",\r\n    ASK_QUESTION: \"ASK_QUESTION\",\r\n    UPDATE_ANSWERS: \"UPDATE_ANSWERS\"\r\n};\r\n\r\nexport function receiveUsers(users) {\r\n    return {\r\n        type: USERS_ACTION_TYPES.RECEIVE_USERS,\r\n        users\r\n    }\r\n}\r\n\r\n\r\nexport function handleReceiveUsers() {\r\n    return (dispatch) => {\r\n        dispatch(showLoading());\r\n        GameService.getUsers().then((users) => {\r\n            dispatch(receiveUsers(users));\r\n            dispatch(hideLoading());\r\n        });\r\n    }\r\n}\r\n\r\nexport function askQuestion(authenticatedUserId, questionId) {\r\n    return {\r\n        type: USERS_ACTION_TYPES.ASK_QUESTION,\r\n        authenticatedUserId,\r\n        questionId\r\n    }\r\n}\r\n\r\nexport function updateAnswers(questionAnswer) {\r\n    return {\r\n        type: USERS_ACTION_TYPES.UPDATE_ANSWERS,\r\n        questionAnswer\r\n    }\r\n}\r\n","export const QUESTIONS_ACTION_TYPES = {\r\n    RECEIVE_QUESTIONS: \"RECEIVE_QUESTIONS\",\r\n    ADD_QUESTION: \"ADD_QUESTION\",\r\n    RESET_QUESTIONS: \"RESET_QUESTIONS\",\r\n    UPDATE_VOTES: \"UPDATE_VOTES\"\r\n};\r\n\r\nexport function receiveQuestions(questions) {\r\n    return {\r\n        type: QUESTIONS_ACTION_TYPES.RECEIVE_QUESTIONS,\r\n        questions\r\n    }\r\n}\r\n\r\n\r\nexport function resetQuestions() {\r\n    return {\r\n        type: QUESTIONS_ACTION_TYPES.RESET_QUESTIONS\r\n    }\r\n}\r\n\r\nexport function updateVotes(questionAnswer) {\r\n    return {\r\n        type: QUESTIONS_ACTION_TYPES.UPDATE_VOTES,\r\n        questionAnswer\r\n    }\r\n}\r\n\r\nexport function addQuestion(question) {\r\n    return {\r\n        type: QUESTIONS_ACTION_TYPES.ADD_QUESTION,\r\n        question\r\n    }\r\n}\r\n\r\n","export const AUTHENTICATED_USER_ACTION_TYPES = {\r\n    SET_AUTHENTICATED_USER: \"SET_AUTHENTICATED_USER\"\r\n};\r\n\r\n\r\nexport function setAuthenticatedUser(authenticatedUser) {\r\n    return {\r\n        type: AUTHENTICATED_USER_ACTION_TYPES.SET_AUTHENTICATED_USER,\r\n        authenticatedUser\r\n    }\r\n}\r\n","import {hideLoading, showLoading} from \"react-redux-loading-bar\";\r\nimport {askQuestion, updateAnswers} from \"./users.actions\";\r\nimport {addQuestion, receiveQuestions, resetQuestions, updateVotes} from \"./questions.actions\";\r\nimport {GameService} from \"../services\";\r\nimport {setAuthenticatedUser} from \"./authenticatedUser.action\";\r\n\r\n\r\nexport function handleAddNewQuestion(question) {\r\n    return (dispatch) => {\r\n        dispatch(showLoading());\r\n        GameService.saveQuestion(question)\r\n            .then((formattedQuestion) => dispatch(addQuestion(formattedQuestion)))\r\n            .then((action) => dispatch(askQuestion(question.author, action.question.id)))\r\n            .then(() => dispatch(hideLoading()))\r\n    }\r\n}\r\n\r\n\r\nexport function handleSaveQuestionAnswer(questionAnswer) {\r\n    return (dispatch) => {\r\n        dispatch(showLoading());\r\n        GameService.saveQuestionAnswer(questionAnswer)\r\n            .then(() => dispatch(updateVotes(questionAnswer)))\r\n            .then(() => dispatch(updateAnswers(questionAnswer)))\r\n            .then(() => dispatch(hideLoading()))\r\n    }\r\n}\r\n\r\n\r\nexport function handleSignIn(authenticatedUser) {\r\n    return (dispatch) => {\r\n        dispatch(showLoading());\r\n        GameService.signIn(authenticatedUser)\r\n            .then(() => {\r\n                dispatch(setAuthenticatedUser(authenticatedUser));\r\n                GameService.getQuestions().then((questions) => {\r\n                    dispatch(receiveQuestions(questions));\r\n                    dispatch(hideLoading());\r\n                })\r\n            }).catch((error) => {\r\n            dispatch(hideLoading());\r\n        });\r\n    }\r\n}\r\n\r\nexport function handleSignOut() {\r\n    return (dispatch) => {\r\n        dispatch(resetQuestions());\r\n        dispatch(setAuthenticatedUser(null));\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Responsive} from \"semantic-ui-react\";\r\nimport LoadingBar from \"react-redux-loading-bar\";\r\nimport WideNavbarComponent from \"./wide.navbar.component\";\r\nimport MobileNavbarComponent from \"./mobile.navbar.component\";\r\nimport {handleSignOut} from \"../../actions/shared.actions\";\r\n\r\nclass NavbarComponent extends Component {\r\n\r\n    signOut() {\r\n        const {dispatch} = this.props;\r\n        dispatch(handleSignOut());\r\n    }\r\n\r\n\r\n    render() {\r\n        const {isLoading, authenticatedUser} = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <LoadingBar style={{backgroundColor: 'rgb(97,218,251)'}}/>\r\n                <Responsive minWidth={768}>\r\n                    <WideNavbarComponent authenticatedUser={authenticatedUser}\r\n                                         isLoading={isLoading}\r\n                                         signOut={this.signOut.bind(this)}/>\r\n                </Responsive>\r\n                <Responsive maxWidth={767}>\r\n                    <MobileNavbarComponent authenticatedUser={authenticatedUser}\r\n                                           isLoading={isLoading}\r\n                                           signOut={this.signOut.bind(this)}/>\r\n                </Responsive>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser, users, loadingBar}) {\r\n    return {\r\n        authenticatedUser: users ? users[authenticatedUser] : null,\r\n        isLoading: loadingBar.default\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavbarComponent);\r\n","import React from 'react';\r\n\r\nfunction FooterComponent() {\r\n    return (\r\n        <span className=\"copy-right\">\r\n                    copyright © 2020 all rights reserved by\r\n                    <a href=\"https://www.seanroshan.com\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                       className=\"copy-right-link\">Sean Roshan</a>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default FooterComponent;\r\n","import React, {Component} from 'react';\r\nimport {Card, CardContent, Divider, Form, Header} from \"semantic-ui-react\";\r\nimport {connect} from \"react-redux\";\r\nimport {handleAddNewQuestion} from \"../../../actions/shared.actions\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\nclass ComposeComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            optionOneText: '',\r\n            optionTwoText: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        const {name, value} = event.target;\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {optionOneText, optionTwoText} = this.state;\r\n        const {authenticatedUser, dispatch} = this.props;\r\n        const question = {author: authenticatedUser, optionOneText, optionTwoText};\r\n        dispatch(handleAddNewQuestion(question));\r\n        this.setState(() => ({\r\n            optionOneText: '',\r\n            optionTwoText: ''\r\n        }));\r\n        this.toHome();\r\n    }\r\n\r\n    toHome() {\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n    render() {\r\n        const {optionOneText, optionTwoText} = this.state;\r\n        return (\r\n            <Card fluid>\r\n                <Card.Content textAlign={\"center\"} header='Create New Question'/>\r\n                <CardContent>\r\n                    <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n                        <Header size='small'>Complete the question:</Header>\r\n                        <Header size='large'>Would you rather...</Header>\r\n                        <Form.Input fluid\r\n                                    placeholder='Enter Option One Text Here'\r\n                                    value={optionOneText}\r\n                                    name=\"optionOneText\"\r\n                                    onChange={this.handleChange}/>\r\n                        <Divider horizontal>Or</Divider>\r\n                        <Form.Input fluid\r\n                                    placeholder='Enter Option Two Text Here'\r\n                                    value={optionTwoText}\r\n                                    name=\"optionTwoText\"\r\n                                    onChange={this.handleChange}/>\r\n                        <Form.Button fluid color=\"teal\" content='Submit'/>\r\n                    </Form>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({authenticatedUser}) {\r\n    return {\r\n        authenticatedUser\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(ComposeComponent));\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport {Card, CardContent, Grid, Header, Image, Label, Segment} from \"semantic-ui-react\";\r\n\r\nfunction UserScoreboardComponent(props) {\r\n\r\n    const {scoreBoardCard} = props;\r\n\r\n    const {name, avatar, answered, asked, score, medalColor} = scoreBoardCard;\r\n\r\n    return (\r\n        <Segment color={medalColor} raised>\r\n            <Label as='a' color={medalColor} ribbon icon='trophy'/>\r\n            <Grid columns={3} verticalAlign={\"middle\"}>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        <Image src={avatar} alt={`Avatar of ${name}`} circular/>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Header textAlign=\"left\" size=\"large\">{name}</Header>\r\n                        <Grid verticalAlign={\"middle\"}>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={12} textAlign=\"left\">\r\n                                    <Header textAlign=\"left\" size=\"medium\">Answered questions</Header>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={1} textAlign=\"right\">\r\n                                    <Header textAlign=\"right\" size=\"medium\">{answered}</Header>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                            <Grid.Row>\r\n                                <Grid.Column width={12} textAlign=\"left\">\r\n                                    <Header textAlign=\"left\" size=\"medium\">Created questions</Header>\r\n                                </Grid.Column>\r\n                                <Grid.Column width={1} textAlign=\"right\">\r\n                                    <Header textAlign=\"right\" size=\"medium\">{asked}</Header>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Card>\r\n                            <Card.Content textAlign={\"center\"} header='Score'/>\r\n                            <CardContent textAlign={\"center\"}>\r\n                                <Label circular color={medalColor} key={medalColor}>\r\n                                    {score}\r\n                                </Label>\r\n                            </CardContent>\r\n                        </Card>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default UserScoreboardComponent;\r\n\r\nUserScoreboardComponent.propTypes = {\r\n    scoreBoardCard: PropTypes.object.isRequired\r\n};\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {GameService} from \"../../../services\";\r\nimport {Message} from \"semantic-ui-react\";\r\nimport UserScoreboardComponent from \"../../../components/user/scoreboard/user.scoreboard.component\";\r\n\r\nclass LeaderboardComponent extends Component {\r\n    render() {\r\n\r\n        const {users} = this.props;\r\n        const userScoreBoards = users && Object.keys(users)\r\n            ? GameService.generateScoreBoardCards(users)\r\n            : [];\r\n\r\n        return (userScoreBoards && userScoreBoards.length)\r\n            ? userScoreBoards.map((scoreBoardCard) => (\r\n                <UserScoreboardComponent key={scoreBoardCard.id} scoreBoardCard={scoreBoardCard}/>))\r\n            : (<Message negative>\r\n                <Message.Header>Leaderboard is empty!</Message.Header>\r\n            </Message>)\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({users}) {\r\n    return {\r\n        users\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LeaderboardComponent);\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {handleReceiveUsers} from \"../../../actions/users.actions\";\r\nimport {Card, CardHeader, Dropdown, Header, Image, Responsive} from \"semantic-ui-react\";\r\nimport {handleSignIn} from \"../../../actions/shared.actions\";\r\n\r\nclass LoginComponent extends Component {\r\n\r\n    static initializeUserOptions(users) {\r\n        if (!users) return [];\r\n        return Object.keys(users).map((key) => {\r\n            const user = users[key];\r\n            return {\r\n                key,\r\n                text: user.name,\r\n                value: user.id,\r\n                image: {avatar: true, src: user.avatarURL}\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {dispatch, users} = this.props;\r\n        dispatch(handleReceiveUsers(users));\r\n    }\r\n\r\n    signIn(userId) {\r\n        const {dispatch} = this.props;\r\n        dispatch(handleSignIn(userId));\r\n    }\r\n\r\n    render() {\r\n\r\n        const header = \"Welcome to the Would You Rather App!\";\r\n        const subHeader = \"Please sign in to continue\";\r\n\r\n        const {users} = this.props;\r\n\r\n        let userOptions = LoginComponent.initializeUserOptions(users);\r\n\r\n        return (\r\n            <Card fluid color='grey'>\r\n                <CardHeader textAlign=\"center\" style={{backgroundColor: \"rgba(220,220,220,0.5)\", padding: \"10px\"}}>\r\n                    <Responsive minWidth=\"401\" as={Header} size=\"medium\">{header}</Responsive>\r\n                    <Responsive maxWidth=\"400\" as={Header} size=\"small\">{header}</Responsive>\r\n                    <Header size=\"tiny\">{subHeader}</Header>\r\n                </CardHeader>\r\n                <Card.Content textAlign={\"center\"}>\r\n                    <Image\r\n                        src=\"https://s3-us-west-2.amazonaws.com/asset.plexuss.com/news/images/would-you-rather-school-edition-lg.jpg\"\r\n                        size='large'\r\n                        alt=\"would you rather login image\"\r\n                    />\r\n                    <Header size=\"huge\" color=\"black\">Sign in</Header>\r\n                    <Dropdown\r\n                        text='Select User'\r\n                        icon='user'\r\n                        floating\r\n                        labeled\r\n                        button\r\n                        className='icon'\r\n                    >\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Header content='Please select a user to sign in'/>\r\n                            {userOptions && userOptions.length && userOptions.map((option) => (\r\n                                <Dropdown.Item key={option.value} onClick={() => this.signIn(option.key)} {...option} />\r\n                            ))}\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Card.Content>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction mapStateToProps({users}) {\r\n    return {\r\n        users\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LoginComponent);\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Card, CardContent, Divider, Grid, Header, Image} from \"semantic-ui-react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass QuestionInfoComponent extends Component {\r\n\r\n    render() {\r\n        const {questionCard} = this.props;\r\n\r\n        const {authorName, authorAvatar, optionOne, optionTwo, authenticatedUserAnswer} = questionCard;\r\n\r\n        return (\r\n            <Card fluid>\r\n                <Card.Content header={`${authorName} asks:`}/>\r\n                <CardContent>\r\n                    <Grid celled columns={2}>\r\n                        <Grid.Column verticalAlign='middle' textAlign={\"center\"}>\r\n                            <Image src={authorAvatar} size='small' circular/>\r\n                        </Grid.Column>\r\n                        <Grid.Column verticalAlign='top'>\r\n                            <Header textAlign={\"left\"} size={\"medium\"}>Would you rather...</Header>\r\n                            <Header textAlign={\"center\"} size={\"small\"}>{`${optionOne}`}</Header>\r\n                            <Divider horizontal>Or</Divider>\r\n                            <Header textAlign={\"center\"} size={\"small\"}>{`${optionTwo}`}</Header>\r\n                            {authenticatedUserAnswer && (<Header textAlign={\"left\"} size={\"large\"}\r\n                                                                 color=\"teal\">{`Your Answer: ${authenticatedUserAnswer}`}</Header>)}\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </CardContent>\r\n                <Button secondary attached='top' as={Link} to={`/questions/${questionCard.questionId}`}>\r\n                    View Poll</Button>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({authenticatedUser}, {questionCard}) {\r\n    return {\r\n        authenticatedUser,\r\n        questionCard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(QuestionInfoComponent);\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport QuestionInfoComponent from \"../info/question.info.component\";\r\nimport {Message} from \"semantic-ui-react\";\r\n\r\nfunction QuestionListComponent(props) {\r\n\r\n    const {questionCards} = props;\r\n\r\n\r\n    return (questionCards && questionCards.length)\r\n        ? questionCards.map((questionCard) => (\r\n            <QuestionInfoComponent key={questionCard.questionId} questionCard={questionCard}/>))\r\n        : (<Message negative>\r\n            <Message.Header>Empty list!</Message.Header>\r\n        </Message>)\r\n\r\n\r\n}\r\n\r\nexport default QuestionListComponent;\r\n\r\nQuestionListComponent.propTypes = {\r\n    questionCards: PropTypes.array\r\n};\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport QuestionListComponent from \"../../../components/question/list/question.list.component\";\r\nimport {Tab} from \"semantic-ui-react\";\r\nimport {GameService} from \"../../../services\";\r\n\r\nclass HomeComponent extends Component {\r\n\r\n    render() {\r\n\r\n        const {questions, users, authenticatedUser, loading} = this.props;\r\n\r\n        const questionCards =\r\n            questions ?\r\n                Object.keys(questions)\r\n                    .sort((a, b) => questions[b].timestamp - questions[a].timestamp)\r\n                    .map((questionId) => (GameService.generateQuestionBasicCardInfo(authenticatedUser, questionId, users, questions)))\r\n                : [];\r\n\r\n        const answeredList = questionCards.filter((questionCard) => questionCard.authenticatedUserAnswer);\r\n        const unAnsweredList = questionCards.filter((questionCard) => !questionCard.authenticatedUserAnswer);\r\n\r\n        const panes = [\r\n            {\r\n                menuItem: 'Unanswered Questions',\r\n                key: \"unansweredList\",\r\n                render: () => <Tab.Pane loading={loading}><QuestionListComponent\r\n                    questionCards={unAnsweredList}/></Tab.Pane>\r\n            },\r\n            {\r\n                menuItem: 'Answered Questions',\r\n                key: \"answeredList\",\r\n                render: () => <Tab.Pane loading={loading}><QuestionListComponent\r\n                    questionCards={answeredList}/></Tab.Pane>\r\n            },\r\n        ];\r\n\r\n        return (\r\n            <Tab panes={panes}/>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser, users, questions, loadingBar}) {\r\n    return {\r\n        loading: !!loadingBar.default,\r\n        questions,\r\n        authenticatedUser,\r\n        users\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(HomeComponent);\r\n","import React, {Component} from 'react';\r\nimport {Card, CardContent, Form, Grid, Header, Image, Radio} from \"semantic-ui-react\";\r\nimport {connect} from \"react-redux\";\r\nimport {handleSaveQuestionAnswer} from \"../../../actions/shared.actions\";\r\n\r\nclass QuestionAnswerComponent extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            answer: \"optionOne\"\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event, {value}) {\r\n        this.setState({answer: value});\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const {answer} = this.state;\r\n        const {authenticatedUser, questionCard, dispatch} = this.props;\r\n        const {questionId} = questionCard;\r\n        const questionAnswer = {authenticatedUser, qid: questionId, answer};\r\n        dispatch(handleSaveQuestionAnswer(questionAnswer));\r\n    }\r\n\r\n    render() {\r\n\r\n        const {questionCard} = this.props;\r\n\r\n        const {authorName, authorAvatar, optionOne, optionTwo} = questionCard;\r\n\r\n        return (\r\n            <Card fluid>\r\n                <Card.Content textAlign={\"left\"} header={`${authorName} asks:`}/>\r\n                <CardContent>\r\n                    <Grid columns={2} divided>\r\n                        <Grid.Row>\r\n                            <Grid.Column textAlign={\"center\"} verticalAlign={\"middle\"}>\r\n                                <Image src={authorAvatar} alt={`avatar of ${authorName}`} size={\"small\"} circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column textAlign={\"left\"} verticalAlign={\"middle\"}>\r\n                                <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n                                    <Header size={\"large\"}>Would You Rather...</Header>\r\n                                    <Form.Field>\r\n                                        <Radio\r\n                                            label={optionOne}\r\n                                            name='answer'\r\n                                            value='optionOne'\r\n                                            checked={this.state.answer === 'optionOne'}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </Form.Field>\r\n                                    <Form.Field>\r\n                                        <Radio\r\n                                            label={optionTwo}\r\n                                            name='answer'\r\n                                            value='optionTwo'\r\n                                            checked={this.state.answer === 'optionTwo'}\r\n                                            onChange={this.handleChange}\r\n                                        />\r\n                                    </Form.Field>\r\n                                    <Form.Button fluid color=\"teal\" content='Submit'/>\r\n                                </Form>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser}, {questionCard}) {\r\n    return {\r\n        authenticatedUser,\r\n        questionCard\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(QuestionAnswerComponent);\r\n","import React from 'react';\r\nimport {Header, Label, Progress, Segment} from \"semantic-ui-react\";\r\n\r\nfunction UserVoteComponent(props) {\r\n\r\n    const {userVoteCard} = props;\r\n\r\n    const {isUserVote, text, votes, total} = userVoteCard;\r\n    const percentage = ((votes * 100) / total).toFixed(2);\r\n\r\n    return (\r\n        <Segment tertiary={isUserVote} color={isUserVote ? \"green\" : \"black\"} raised={isUserVote}>\r\n            {isUserVote && (\r\n                <Label as='a' color='yellow' ribbon='right'>\r\n                    Your Vote\r\n                </Label>\r\n            )}\r\n            <Header\r\n                className=\"vote_header\"\r\n                size={\"medium\"}\r\n                color={isUserVote ? \"green\" : \"black\"}>\r\n                {`Would you rather ${text}?`}\r\n            </Header>\r\n            <Progress percent={percentage} progress color={\"green\"} className=\"vote_progress_bar\"/>\r\n            <Header\r\n                className=\"vote_header\"\r\n                color={\"black\"}\r\n                textAlign={\"center\"}\r\n                size={\"small\"}>{`${votes} out of ${total} votes`}\r\n            </Header>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default UserVoteComponent;\r\n","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Card, CardContent, Grid, Header, Image} from \"semantic-ui-react\";\r\nimport UserVoteComponent from \"../../user/vote/user.vote.component\";\r\n\r\nclass QuestionResultComponent extends Component {\r\n    render() {\r\n        const {questionCard} = this.props;\r\n\r\n        const {optionOne, optionTwo, optionOneVotes, optionTwoVotes, authenticatedUserAnswer, authorName, authorAvatar} = questionCard;\r\n\r\n\r\n        const optionOneUserVoteCard = {\r\n            isUserVote: authenticatedUserAnswer === optionOne,\r\n            text: optionOne,\r\n            votes: optionOneVotes,\r\n            total: optionOneVotes + optionTwoVotes\r\n        };\r\n\r\n        const optionTwoUserVoteCard = {\r\n            isUserVote: authenticatedUserAnswer === optionTwo,\r\n            text: optionTwo,\r\n            votes: optionTwoVotes,\r\n            total: optionOneVotes + optionTwoVotes\r\n        };\r\n\r\n\r\n        return (\r\n            <Card fluid>\r\n                <Card.Content header={`Asked by ${authorName}`}/>\r\n                <CardContent>\r\n                    <Grid columns={2} divided>\r\n                        <Grid.Row>\r\n                            <Grid.Column textAlign={\"center\"} verticalAlign={\"middle\"}>\r\n                                <Image src={authorAvatar} alt={`avatar of ${authorName}`} size={\"small\"} circular/>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <Header size={\"large\"}>Result:</Header>\r\n                                <UserVoteComponent userVoteCard={optionOneUserVoteCard}/>\r\n                                <UserVoteComponent userVoteCard={optionTwoUserVoteCard}/>\r\n                            </Grid.Column>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser}, {questionCard}) {\r\n    return {\r\n        questionCard,\r\n        authenticatedUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(QuestionResultComponent);\r\n","import React, {Component} from 'react';\r\nimport QuestionAnswerComponent from \"../../../components/question/answer/question.answer.component\";\r\nimport {connect} from \"react-redux\";\r\nimport QuestionResultComponent from \"../../../components/question/result/question.result.component\";\r\nimport {GameService} from \"../../../services\";\r\n\r\nclass DetailComponent extends Component {\r\n\r\n    render() {\r\n        const {authenticatedUser, id, users, questions} = this.props;\r\n        const activeUser = users[authenticatedUser];\r\n        const isAnswered = Object.keys(activeUser.answers).includes(id);\r\n        const questionCard = GameService.generateQuestionBasicCardInfo(authenticatedUser, id, users, questions);\r\n\r\n        return isAnswered\r\n            ? (<QuestionResultComponent questionCard={questionCard}/>)\r\n            : (<QuestionAnswerComponent questionCard={questionCard}/>)\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser, users, questions}, {match}) {\r\n    const {id} = match.params;\r\n    return {\r\n        authenticatedUser,\r\n        users,\r\n        questions,\r\n        id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DetailComponent);\r\n\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport {Grid, Header, Icon, Segment} from \"semantic-ui-react\";\r\n\r\nfunction ErrorComponent(props) {\r\n    const {message} = props;\r\n    return (\r\n        <Segment  raised inverted color='red'>\r\n            <Grid columns={2}>\r\n                <Grid.Row>\r\n                    <Grid.Column textAlign={\"center\"} verticalAlign={\"middle\"}>\r\n                        <Icon name='warning sign' size='massive'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column textAlign={\"left\"} verticalAlign={\"middle\"}>\r\n                        <Header inverted color={\"white\"} size={\"large\"}>{message}</Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n}\r\n\r\nexport default ErrorComponent;\r\n\r\nErrorComponent.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport ErrorComponent from \"../../../components/error/error.component\";\r\n\r\nfunction NotfoundComponent() {\r\n    return (\r\n        <ErrorComponent message={\"404: PAGE NOT FOUND!\"}/>\r\n    );\r\n}\r\n\r\nexport default NotfoundComponent;\r\n","import React, {Component} from 'react';\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport ComposeComponent from \"./compose/compose.component\";\r\nimport LeaderboardComponent from \"./leaderboard/leaderboard.component\";\r\nimport LoginComponent from \"./login/login.component\";\r\nimport {connect} from \"react-redux\";\r\nimport HomeComponent from \"./home/home.component\";\r\nimport DetailComponent from \"./detail/detail.component\";\r\nimport NotfoundComponent from \"./notfound/notfound.component\";\r\n\r\nclass DashboardComponent extends Component {\r\n\r\n    render() {\r\n\r\n        const {authenticatedUser} = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Switch>\r\n                    <Route path=\"/\" exact render={() => {\r\n                        return authenticatedUser\r\n                            ? <HomeComponent/>\r\n                            : <Redirect to=\"/login\"/>;\r\n                    }}/>\r\n                    <Route path=\"/add\" render={() => {\r\n                        return authenticatedUser\r\n                            ? <ComposeComponent/>\r\n                            : <Redirect to=\"/login\"/>;\r\n                    }}/>\r\n                    <Route path=\"/leaderboard\" render={() => {\r\n                        return authenticatedUser\r\n                            ? <LeaderboardComponent/>\r\n                            : <Redirect to=\"/login\"/>;\r\n                    }}/>\r\n                    <Route path=\"/questions/:id\" render={({match}) => {\r\n                        return authenticatedUser\r\n                            ? <DetailComponent match={match}/>\r\n                            : <Redirect to=\"/login\"/>;\r\n                    }}/>\r\n                    <Route path=\"/login\" render={() => {\r\n                        return authenticatedUser\r\n                            ? <Redirect to=\"/\"/>\r\n                            : <LoginComponent/>;\r\n                    }}/>\r\n                    <Route component={NotfoundComponent}/>\r\n                </Switch>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps({authenticatedUser}) {\r\n    return {\r\n        authenticatedUser\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(DashboardComponent);\r\n","import React, {Component} from 'react';\nimport './styles/Application.scss';\nimport NavbarComponent from \"./components/navbar/navbar.component\";\nimport {Segment} from \"semantic-ui-react\";\nimport FooterComponent from \"./components/footer/footer.component\";\nimport {HashRouter} from \"react-router-dom\";\nimport DashboardComponent from \"./views/dashboard/dashboard.component\";\n\n/**\n * @return {boolean}\n */\nclass App extends Component {\n\n    render() {\n        return (\n            <HashRouter basename=\"/\">\n                <div className=\"header\">\n                    <NavbarComponent/>\n                </div>\n                <Segment basic className=\"app-content-container\">\n                    <DashboardComponent/>\n                </Segment>\n                <div className=\"app-footer-container\"><FooterComponent/></div>\n            </HashRouter>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport {loadingBarReducer} from \"react-redux-loading-bar\";\r\n\r\nimport users from \"./users.reducer\";\r\nimport questions from \"./questions.reducer\";\r\nimport authenticatedUser from \"./authenticatedUser.reducer\";\r\n\r\n\r\nexport default combineReducers({\r\n    users,\r\n    questions,\r\n    authenticatedUser,\r\n    loadingBar: loadingBarReducer\r\n});\r\n","import {USERS_ACTION_TYPES} from \"../actions/users.actions\";\r\n\r\nexport default function users(state = {}, action) {\r\n    switch (action.type) {\r\n        case USERS_ACTION_TYPES.RECEIVE_USERS: {\r\n            return {\r\n                ...state,\r\n                ...action.users\r\n            }\r\n        }\r\n        case USERS_ACTION_TYPES.ASK_QUESTION: {\r\n            const {authenticatedUserId, questionId} = action;\r\n            return {\r\n                ...state,\r\n                [authenticatedUserId]: {\r\n                    ...state[authenticatedUserId],\r\n                    questions: state[authenticatedUserId].questions.concat(questionId)\r\n                }\r\n            }\r\n        }\r\n        case USERS_ACTION_TYPES.UPDATE_ANSWERS: {\r\n            const {questionAnswer} = action;\r\n            const {qid, authenticatedUser, answer} = questionAnswer;\r\n            return {\r\n                ...state,\r\n                [authenticatedUser]: {\r\n                    ...state[authenticatedUser],\r\n                    answers: {\r\n                        ...state[authenticatedUser].answers,\r\n                        [qid]: answer\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","import {QUESTIONS_ACTION_TYPES} from \"../actions/questions.actions\";\r\n\r\nexport default function questions(state = {}, action) {\r\n    switch (action.type) {\r\n        case QUESTIONS_ACTION_TYPES.RECEIVE_QUESTIONS: {\r\n            return {\r\n                ...state,\r\n                ...action.questions\r\n            }\r\n        }\r\n        case QUESTIONS_ACTION_TYPES.ADD_QUESTION: {\r\n            const {question} = action;\r\n            return {\r\n                ...state,\r\n                [question.id]: question\r\n            }\r\n        }\r\n        case QUESTIONS_ACTION_TYPES.UPDATE_VOTES: {\r\n            const {questionAnswer} = action;\r\n            const {qid, authenticatedUser, answer} = questionAnswer;\r\n            return {\r\n                ...state,\r\n                [qid]: {\r\n                    ...state[qid],\r\n                    [answer]: {\r\n                        ...state[qid][answer],\r\n                        votes: state[qid][answer].votes.concat([authenticatedUser])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        case QUESTIONS_ACTION_TYPES.RESET_QUESTIONS: {\r\n            return {}\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n    }\r\n}\r\n","import {AUTHENTICATED_USER_ACTION_TYPES} from \"../actions/authenticatedUser.action\";\r\n\r\nexport default function authenticatedUser(state = null, action) {\r\n    switch (action.type) {\r\n        case AUTHENTICATED_USER_ACTION_TYPES.SET_AUTHENTICATED_USER: {\r\n            return action.authenticatedUser\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n","const logger = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.log('The action: ', action);\r\n    const result = next(action);\r\n    console.log('The new state: ', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\nexport default logger;\r\n","import thunk from \"redux-thunk\";\r\nimport logger from \"./logger.middleware\";\r\nimport {applyMiddleware} from \"redux\";\r\n\r\nexport default applyMiddleware(\r\n    thunk,\r\n    logger\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport reducer from './reducers';\nimport middleware from './middlewares';\n\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}