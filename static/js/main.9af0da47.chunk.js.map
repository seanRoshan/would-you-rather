{"version":3,"sources":["assets/logo.svg","components/navbar/navbar.component.js","components/footer/footer.component.js","views/dashboard/compose/compose.component.js","views/dashboard/leaderboard/leaderboard.component.js","views/dashboard/login/login.component.js","views/dashboard/home/home.component.js","views/dashboard/dashboard.component.js","App.js","actions/shared.actions.js","serviceWorker.js","reducers/index.js","middlewares/logger.middleware.js","middlewares/index.js","index.js"],"names":["module","exports","NavbarComponent","this","props","isLoading","authenticatedUser","console","log","Fragment","style","backgroundColor","Menu","pointing","secondary","Item","src","logo","alt","className","Header","as","NavLink","to","exact","activeClassName","name","position","Component","connect","loadingBar","default","FooterComponent","href","rel","target","ComposeComponent","LeaderboardComponent","LoginComponent","HomeComponent","DashboardComponent","path","component","App","dispatch","showLoading","setTimeout","hideLoading","basename","Segment","Boolean","window","location","hostname","match","combineReducers","loadingBarReducer","logger","store","next","action","group","type","result","getState","groupEnd","applyMiddleware","thunk","createStore","reducer","middleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9af0da47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Header, Menu} from \"semantic-ui-react\";\r\n\r\nimport logo from \"../../assets/logo.svg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport LoadingBar from \"react-redux-loading-bar\";\r\n\r\nclass NavbarComponent extends Component {\r\n\r\n    render() {\r\n        const {isLoading, authenticatedUser} = this.props;\r\n\r\n        console.log({isLoading, authenticatedUser});\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <LoadingBar style={{backgroundColor: 'rgb(97,218,251)'}}/>\r\n                <Menu pointing secondary>\r\n                    <Menu.Item>\r\n                        <img src={logo}\r\n                             alt=\"would you rather application logo\"\r\n                             className={isLoading ? \"spin\" : \"\"}\r\n                        />\r\n                    </Menu.Item>\r\n                    <Menu.Item>\r\n                        <Header>Would You Rather</Header>\r\n                    </Menu.Item>\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='home'\r\n                    />\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/new\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='New Question'\r\n                    />\r\n                    <Menu.Item\r\n                        as={NavLink}\r\n                        to=\"/leaderboard\"\r\n                        exact\r\n                        activeClassName='active'\r\n                        name='Leader Board'\r\n                    />\r\n                    <Menu.Menu position='right'>\r\n                        <Menu.Item\r\n                            as={NavLink}\r\n                            to=\"/login\"\r\n                            exact\r\n                            activeClassName='active'\r\n                            name='Login'\r\n                        />\r\n                    </Menu.Menu>\r\n                </Menu>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps({authenticatedUser, loadingBar}) {\r\n    return {\r\n        authenticatedUser,\r\n        isLoading: loadingBar.default\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(NavbarComponent);\r\n","import React from 'react';\r\nimport {Segment} from \"semantic-ui-react\";\r\n\r\nfunction FooterComponent() {\r\n    return (\r\n        <span className=\"copy-right\">\r\n                    copyright Â© 2020 all rights reserved by\r\n                    <a href=\"https://www.seanroshan.com\" rel=\"noopener noreferrer\" target=\"_blank\"\r\n                       className=\"copy-right-link\">Sean Roshan</a>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default FooterComponent;\r\n","import React, {Component} from 'react';\r\n\r\nclass ComposeComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Compose Component!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComposeComponent;\r\n","import React, {Component} from 'react';\r\n\r\nclass LeaderboardComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Leaderboard Component!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LeaderboardComponent;\r\n","import React, {Component} from 'react';\r\n\r\nclass LoginComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Login Component!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginComponent;\r\n","import React, {Component} from 'react';\r\n\r\nclass HomeComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Home Component!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeComponent;\r\n","import React, {Component} from 'react';\r\nimport {Route} from \"react-router-dom\";\r\nimport ComposeComponent from \"./compose/compose.component\";\r\nimport LeaderboardComponent from \"./leaderboard/leaderboard.component\";\r\nimport LoginComponent from \"./login/login.component\";\r\nimport HomeComponent from \"./home/home.component\";\r\n\r\nclass DashboardComponent extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Route path=\"/\" exact component={HomeComponent}/>\r\n                <Route path=\"/new\" component={ComposeComponent}/>\r\n                <Route path=\"/leaderboard\" component={LeaderboardComponent}/>\r\n                <Route path=\"/login\" component={LoginComponent}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashboardComponent;\r\n","import React, {Component} from 'react';\nimport './styles/Application.scss';\nimport NavbarComponent from \"./components/navbar/navbar.component\";\nimport {Segment} from \"semantic-ui-react\";\nimport FooterComponent from \"./components/footer/footer.component\";\nimport {HashRouter} from \"react-router-dom\";\nimport DashboardComponent from \"./views/dashboard/dashboard.component\";\nimport {connect} from \"react-redux\";\nimport {handleInitialData} from \"./actions/shared.actions\";\nimport LoadingBar from \"react-redux-loading-bar\";\n\n/**\n * @return {boolean}\n */\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.dispatch(handleInitialData())\n    }\n\n    render() {\n        return (\n            <HashRouter basename=\"/\">\n                <div className=\"header\">\n                    <NavbarComponent/>\n                </div>\n                <Segment className=\"content\">\n                    <DashboardComponent/>\n                </Segment>\n                <div className=\"footer\"><FooterComponent/></div>\n            </HashRouter>\n        );\n    }\n\n}\n\n\nfunction mapStatetoProps({loadingBar}) {\n    return {\n        loadingBar\n    }\n}\n\n\nexport default connect(mapStatetoProps)(App);\n","import {hideLoading, showLoading} from \"react-redux-loading-bar\";\r\n\r\nexport function handleInitialData() {\r\n    return (dispatch) => {\r\n        dispatch(showLoading());\r\n        setTimeout(() => {\r\n            dispatch(hideLoading());\r\n        }, 3000);\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport {loadingBarReducer} from \"react-redux-loading-bar\";\r\n\r\nexport default combineReducers({\r\n    loadingBar: loadingBarReducer\r\n});\r\n","const logger = (store) => (next) => (action) => {\r\n    console.group(action.type);\r\n    console.log('The action: ', action);\r\n    const result = next(action);\r\n    console.log('The new state: ', store.getState());\r\n    console.groupEnd();\r\n    return result;\r\n};\r\nexport default logger;\r\n","import thunk from \"redux-thunk\";\r\nimport logger from \"./logger.middleware\";\r\nimport {applyMiddleware} from \"redux\";\r\n\r\nexport default applyMiddleware(\r\n    thunk,\r\n    logger\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport reducer from './reducers';\nimport middleware from './middlewares';\n\nconst store = createStore(reducer, middleware);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}